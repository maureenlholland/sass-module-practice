// @forward aggregates variables, mixins, and functions for use in another stylesheet
// SassError: Two forwarded modules both define a variable named $brand-theme.
//   ╷
// 2 │ @forward './includes/colors';
//   │ ━━━━━━━━━━━━━━━━━━━━━━━━━━━━ original @forward
// 3 │ @forward './includes/fonts';
//   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ new @forward
// @forward './includes/colors'; /* uncomment to see variable conflict error */
@forward 'includes/colors' hide $brand-theme; /* see https://sass-lang.com/documentation/at-rules/forward#controlling-visibility */
@forward 'includes/fonts';

// note: if you want to apply forwarded members in the current stylesheet, you have to repeat with @use
// @use makes variables, mixins, and functions available in the current stylesheet

// also note! this does not mean the module is loaded again! 
// from Sass docs: 
// If you do write both a @forward and a @use for the same module in the same file, it’s always a good idea to write the @forward first. That way, if your users want to configure the forwarded module, that configuration will be applied to the @forward before your @use loads it without any configuration.

// You will not be able to configure the module here, but stylesheets that @use this module will be able to set configuration
// SassError: This module was already loaded, so it can't be configured using "with".
//     ╷
// 2   │   @forward './includes/colors';
//     │   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━ original load
// ... │
// 6   │ ┌ @use './includes/colors' with (
// 7   │ │     $primary: black,
// 8   │ │     $secondary: green,
// 9   │ │ ); /* for simple pre-configured styles, you can set variables "with" your used stylesheet */
//     │ └─^ new load
// @use './includes/colors' with (
//     $primary: black,
//     $secondary: green,
// );

@use 'includes/colors';
@use 'includes/fonts';

h1 {
    color: functions.get-theme($brand-theme: 'Brand A');
    font-family: fonts.$heading;
}

p {
    color: colors.$secondary;
    font-family: fonts.$body;
}